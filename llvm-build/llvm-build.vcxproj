<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>16.0</VCProjectVersion>
    <ProjectGuid>{01203CE0-D287-48EA-A399-9B77AA93CE7E}</ProjectGuid>
    <RootNamespace>imgui</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>MultiByte</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <IntDir>$(SolutionDir)$(Platform)\$(Configuration)\build_temp\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <IntDir>$(SolutionDir)$(Platform)\$(Configuration)\build_temp\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <SDLCheck>true</SDLCheck>
      <ConformanceMode>true</ConformanceMode>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <LanguageStandard>stdcpp17</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
    </Link>
    <PostBuildEvent>
      <Command>set CLANG_OPTIONS=CLANG_OPTIONS=
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_BUILD_LLVM_C_DYLIB:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_ENABLE_LTO:STRING="OFF"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_ENABLE_PROJECTS=clang
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_BENCHMARKS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_DOCS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_EXAMPLES:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_GO_TESTS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_TESTS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_UTILS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_BUGPOINT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_BUGPOINT_PASSES_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_CLANG_BUILD:BOOL="1"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_DSYMUTIL_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLC_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLI_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_AR_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_AS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_AS_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_BCANALYZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CAT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CFI_VERIFY_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CONFIG_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_COV_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CVTRES_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CXXDUMP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CXXFILT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CXXMAP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_DIFF_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_DIS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_DWARFDUMP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_DWP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_ELFABI_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_EXEGESIS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_EXTRACT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_GO_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_IFS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_ISEL_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_JITLINK_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_JITLISTENER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_LINK_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_LIPO_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_LTO_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_LTO2_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MC_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MCA_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MODEXTRACT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_NM_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_OBJCOPY_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_OBJDUMP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_OPT_REPORT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_PDBUTIL_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_PROFDATA_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_RC_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_READOBJ_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_REDUCE_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_RTDYLD_BUILD:BOOL="0"-DLLVM_TOOL_GOLD_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SHLIB_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SIZE_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SPECIAL_CASE_LIST_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SPLIT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_STRESS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_STRINGS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SYMBOLIZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_UNDNAME_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_XRAY_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_YAML_NUMERIC_PARSER_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LTO_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_OBJ2YAML_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_OPT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_OPT_VIEWER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_REMARKS_SHLIB_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_SANCOV_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_SANSTATS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_VERIFY_USELISTORDER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_VFABI_DEMANGLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_XCODE_TOOLCHAIN_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_YAML2OBJ_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOLS_INSTALL_DIR:STRING="bin"
echo %CLANG_OPTIONS%

if exist "C:\Users\User\GitHub\Opus\llvm-build\cmake\LLVM.sln" (

    echo LLVM/Clang is already configured

) else (

    cmake %CLANG_OPTIONS% -G "Visual Studio 16 2019" -A x64 -Thost=x64 -S "$(SolutionDir)llvm-project\llvm" -B "$(ProjectDir)cmake"

)

if exist "$(ProjectDir)cmake\$(Configuration)\lib\clangTooling.lib" (

    echo LLVM/Clang is already built
    goto end_llvm_compile
	
)

for /f "tokens=1,2* delims=: " %%i in (
  'wmic OS get TotalVisibleMemorySize /Value ^|  findstr /B /C:"TotalVisibleMemorySize="'
) do set %%i

set LLVM_COMPILE_THREAD_MEMORY=2621440
set /a MAX_LLVM_COMPILE_PROCESSORS=%TotalVisibleMemorySize% / %LLVM_COMPILE_THREAD_MEMORY%

echo %MAX_LLVM_COMPILE_PROCESSORS%

if %MAX_LLVM_COMPILE_PROCESSORS% GEQ %NUMBER_OF_PROCESSORS% (  
	echo Compiling LLVM (Multithread Mode)
	msbuild /t:Build /p:Configuration=$(Configuration) /p:Platform=x64 "$(ProjectDir)cmake\LLVM.sln" -verbosity:minimal /p:WarningLevel=0 /NoWarn:MSB8065 -m
) else (
	echo Compiling LLVM
	msbuild /t:Build /p:Configuration=$(Configuration) /p:Platform=x64 "$(ProjectDir)cmake\LLVM.sln" -verbosity:minimal /p:WarningLevel=0 /NoWarn:MSB8065
)

echo Finished compiling LLVM

:end_llvm_compile</Command>
    </PostBuildEvent>
    <Lib>
      <AdditionalOptions>/ignore:4099 %(AdditionalOptions)</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <ConformanceMode>true</ConformanceMode>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <LanguageStandard>stdcpp17</LanguageStandard>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <PostBuildEvent>
      <Command>set CLANG_OPTIONS=CLANG_OPTIONS=
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_BUILD_LLVM_C_DYLIB:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_ENABLE_LTO:STRING="OFF"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_ENABLE_PROJECTS=clang
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_BENCHMARKS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_DOCS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_EXAMPLES:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_GO_TESTS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_TESTS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_INCLUDE_UTILS:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_BUGPOINT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_BUGPOINT_PASSES_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_CLANG_BUILD:BOOL="1"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_DSYMUTIL_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLC_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLI_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_AR_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_AS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_AS_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_BCANALYZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CAT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CFI_VERIFY_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CONFIG_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_COV_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CVTRES_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CXXDUMP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CXXFILT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_CXXMAP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_DIFF_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_DIS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_DWARFDUMP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_DWP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_ELFABI_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_EXEGESIS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_EXTRACT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_GO_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_IFS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_ISEL_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_JITLINK_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_JITLISTENER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_LINK_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_LIPO_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_LTO_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_LTO2_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MC_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MCA_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MODEXTRACT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_MT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_NM_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_OBJCOPY_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_OBJDUMP_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_OPT_REPORT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_PDBUTIL_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_PROFDATA_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_RC_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_READOBJ_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_REDUCE_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_RTDYLD_BUILD:BOOL="0"-DLLVM_TOOL_GOLD_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SHLIB_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SIZE_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SPECIAL_CASE_LIST_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SPLIT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_STRESS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_STRINGS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_SYMBOLIZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_UNDNAME_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_XRAY_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LLVM_YAML_NUMERIC_PARSER_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_LTO_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_OBJ2YAML_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_OPT_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_OPT_VIEWER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_REMARKS_SHLIB_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_SANCOV_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_SANSTATS_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_VERIFY_USELISTORDER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_VFABI_DEMANGLE_FUZZER_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_XCODE_TOOLCHAIN_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOL_YAML2OBJ_BUILD:BOOL="0"
set CLANG_OPTIONS=%CLANG_OPTIONS% -DLLVM_TOOLS_INSTALL_DIR:STRING="bin"
echo %CLANG_OPTIONS%

if exist "C:\Users\User\GitHub\Opus\llvm-build\cmake\LLVM.sln" (

    echo LLVM/Clang is already configured

) else (

    cmake %CLANG_OPTIONS% -G "Visual Studio 16 2019" -A x64 -Thost=x64 -S "$(SolutionDir)llvm-project\llvm" -B "$(ProjectDir)cmake"

)

if exist "$(ProjectDir)cmake\$(Configuration)\lib\clangTooling.lib" (

    echo LLVM/Clang is already built
    goto end_llvm_compile
	
)

for /f "tokens=1,2* delims=: " %%i in (
  'wmic OS get TotalVisibleMemorySize /Value ^|  findstr /B /C:"TotalVisibleMemorySize="'
) do set %%i

set LLVM_COMPILE_THREAD_MEMORY=2621440
set /a MAX_LLVM_COMPILE_PROCESSORS=%TotalVisibleMemorySize% / %LLVM_COMPILE_THREAD_MEMORY%

echo %MAX_LLVM_COMPILE_PROCESSORS%

if %MAX_LLVM_COMPILE_PROCESSORS% GEQ %NUMBER_OF_PROCESSORS% (  
	echo Compiling LLVM (Multithread Mode)
	msbuild /t:Build /p:Configuration=$(Configuration) /p:Platform=x64 "$(ProjectDir)cmake\LLVM.sln" -verbosity:minimal /p:WarningLevel=0 /NoWarn:MSB8065 -m
) else (
	echo Compiling LLVM
	msbuild /t:Build /p:Configuration=$(Configuration) /p:Platform=x64 "$(ProjectDir)cmake\LLVM.sln" -verbosity:minimal /p:WarningLevel=0 /NoWarn:MSB8065
)

echo Finished compiling LLVM

:end_llvm_compile</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>